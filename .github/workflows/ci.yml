name: CI

on:
  pull_request:
  push:
    branches:
      - "master"
    tags:
      - "*"

jobs:
  build:
    # When testing new Python or Django versions, one should use the
    # filterwarnings definition of setup.cfg to turn deprecation warnings
    # into errors.
    strategy:
      matrix:
        include:
          - name: Python 3.8 / Django 4.2
            python_version: "3.8"
            tox_env: py38-django42

          - name: Python 3.9 / Django 4.2
            python_version: "3.9"
            tox_env: py39-django42

          - name: Python 3.10 / Django 4.2
            python_version: "3.10"
            tox_env: py310-django42

          - name: Python 3.11 / Django 4.2
            python_version: "3.11"
            tox_env: py311-django42

          - name: Python 3.12 / Django 4.2
            python_version: "3.12"
            tox_env: py312-django42

          - name: Python 3.12 / Django 5.0
            python_version: "3.12"
            tox_env: py312-django50

          - name: Python 3.12 / Django 5.1
            python_version: "3.12"
            tox_env: py312-django51

    name: "${{ matrix.name }}"
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        # Set health checks to wait until postgres has started
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
          cache: poetry

      - name: Install tox
        run: pipx install tox

      - name: Run ${{ matrix.name }}
        run: tox -e ${{ matrix.tox_env }}
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test
          COVERAGE_FILE: ".coverage.${{ matrix.tox_env }}"

      - name: Store coverage file
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: .coverage.${{ matrix.tox_env }}

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: build
    permissions:
      pull-requests: write
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v3
        id: download
        with:
          name: "coverage"

      - name: Coverage comment
        id: coverage_comment
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MERGE_COVERAGE_FILES: true

      - name: Store Pull Request comment to be posted
        uses: actions/upload-artifact@v3
        if: steps.coverage_comment.outputs.COMMENT_FILE_WRITTEN == 'true'
        with:
          name: python-coverage-comment-action
          path: python-coverage-comment-action.txt

  report-status:
    name: success
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Report success
        run: echo 'Success !'
